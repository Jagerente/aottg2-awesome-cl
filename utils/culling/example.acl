component Activatable
{
    Active = false;

    _active = false;

    function Initialize()
    {
        self._active = self.Active;
    }

    function Reset()
    {
        self.Initialize();
    }

    function OnGameStart()
    {
        self.Initialize();
    }

    function Activate()
    {
        self._active = true;
    }

    function Deactivate()
    {
        self._active = false;
    }

    function Toggle()
    {
        self._active = !self._active;
    }

    # @return bool
    function IsActive()
    {
        return self._active;
    }
}

component DistanceButton
{
    ActivatableID = 0;
    ActivatableIDTooltip = "Leave 0 to use the Activatable component from the same object.";
    DeactivateDelay = 0.0;
    DeactivateDelayTooltip = "Time after which Activatable will be deactivated on deactivation trigger.";
    Distance = 100.0;
    DistanceTooltip = "Maximum distance from the player to trigger the component's activation/deactivation.";
    Reverse = false;
    ReverseTooltip = "If true, the activation behavior is reversed, activating the component when it would normally deactivate.";

    # @type Activatable
    _activatable = null;
    # @type Timer
    _timer = null;

    function Initialize()
    {
        self._timer = Timer(0.0);
        if (self.ActivatableID <= 0)
        {
            self._activatable = self.MapObject.GetComponent("Activatable");
        }
        else 
        {
            obj = Map.FindMapObjectByID(self.ActivatableID);
            self._activatable = obj.GetComponent("Activatable");
        }
    }
    
    function OnGameStart()
    {
        self.Initialize();
    }

    function OnTick()
    {
        c = Network.MyPlayer.Character;
        if (c != null)
        {
            d = Vector3.Distance(c.Position, self.MapObject.Position);
            if (d <= self.Distance)
            {
                self._timer.Reset(self.DeactivateDelay + 0.25);
            }
        }

        self._timer.UpdateOnTick();
        if (self._timer.IsDone())
        {
            if (self.Reverse)
            {
                self._activatable.Activate();
            }
            else
            {
                self._activatable.Deactivate();
            }
        }
        else
        {
            if (self.Reverse)
            {
                self._activatable.Deactivate();
            }
            else
            {
                self._activatable.Activate();
            }
        }
    }

    function IsActive()
    {
        return self._activatable.IsActive();
    }
}

component RegionButton
{
    DeactivateDelay = 0.0;
    DeactivateDelayTooltip = "Time after which Activatable will be deactivated on deactivation trigger.";
    Reverse = false;
    ReverseTooltip = "If true, the activation behavior is reversed, activating the component when it would normally deactivate.";

    # @type Activatable
    _activatable = null;
    _timer = Timer(0.0);

    function Initialize()
    {
        self._activatable = self.MapObject.GetComponent("Activatable");
    }

    function OnGameStart()
    {
        self.Initialize();
    }

    function OnCollisionStay(obj)
    {
        if ((obj.Type != "Human" && obj.Type != "Titan" && obj.Type != "Shifter") || !obj.IsMine)
        {
            return;
        }

        self._timer.Reset(self.DeactivateDelay + 0.25);
    }

    function OnCollisionExit(obj)
    {
        if ((obj.Type != "Human" && obj.Type != "Titan" && obj.Type != "Shifter") || !obj.IsMine)
        {
            return;
        }

        self._timer.Reset(self.DeactivateDelay);
    }

    function OnTick()
    {
        self._timer.UpdateOnTick();
        if (self._timer.IsDone())
        {
            if (self.Reverse)
            {
                self._activatable.Activate();
            }
            else
            {
                self._activatable.Deactivate();
            }
        }
        else
        {
            if (self.Reverse)
            {
                self._activatable.Deactivate();
            }
            else
            {
                self._activatable.Activate();
            }
        }
    }

    function IsActive()
    {
        return self._activatable.IsActive();
    }
}

component ActiveControl
{
    ActivatableID = 0;
    ActivatableIDTooltip = "Leave 0 to use the Activatable component from the same object.";
    Reverse = false;
    ReverseTooltip = "If true, the activation behavior is reversed, activating the component when it would normally deactivate.";

    # @type Activatable
    _activatable = null;
    _activated = false;
    _deactivatableList = List();

    function Initialize()
    {
        obj = Map.FindMapObjectByID(self.ActivatableID);
        self._activatable = obj.GetComponent("Activatable");
        isActive = self._activatable.IsActive() != self.Reverse;

        self._RegisterDeactivatableComponents();

        if (!isActive)
        {
            self._Deactivate();
        }

        self._activated = isActive;
    }

    # Registers components with OnDeactivate() callback to call when ActiveControl will deactivate all MapObjects components.
    function _RegisterDeactivatableComponents()
    {
        # Example
        # self._deactivatableList.Add("ComponentName1");
        # self._deactivatableList.Add("ComponentName2");
        # self._deactivatableList.Add("ComponentName3");
    }

    function OnGameStart()
    {
        self.Initialize();
    }

    function OnTick()
    {
        isActive = self._activatable == null || (self._activatable.IsActive() != self.Reverse);
        if (self._activated == isActive)
        {
            return;
        }

        self._activated = isActive;

        self.MapObject.Active = self._activated;
        if (!self._activated)
        {
            self._Deactivate();
        }
        else
        {
            self._Activate();
        }
    }

    function _Activate()
    {
        self.MapObject.SetComponentsEnabled(true);
    }

    function _Deactivate()
    {
        self.MapObject.SetComponentsEnabled(false);
        self.MapObject.SetComponentEnabled("ActiveControl", true);

        for (k in self._deactivatableList)
        {
            comp = self.MapObject.GetComponent(k);
            if (comp != null)
            {
                comp.OnDeactivate();
            }
        }
    }
}

class Timer
{
    _time = 0.0;
    _lastInitialTime = 0.0;

    # @param time float
    function Init(time)
    {
        self.Reset(time);
    }

    # @param decimals int
    # @return string
    function String(decimals)
    {
        return String.FormatFloat(self._time, decimals);
    }

    # @return float
    function GetTime()
    {
        return self._time;
    }
    
    # @return float
    function GetInitialTime()
    {
        return self._lastInitialTime;
    }

    # @return bool
    function IsDone()
    {
        return self._time <= 0.0;
    }

    # @param time float
    function Reset(time)
    {
        self._time = time;
        self._lastInitialTime = time;
    }

    function UpdateOnFrame()
    {
        self.update(Time.FrameTime);
    }

    function UpdateOnTick()
    {
        self.update(Time.TickTime);
    }

    # @param val float
    function update(val)
    {
        self._time -= val;
    }
}